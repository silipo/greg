package it.istat.dcit.itc.greg.service;

import it.istat.dcit.itc.greg.model.Rule;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import javax.script.ScriptException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertTrue;

/**
 * Test rules
 */
public class CheckServiceTest  {

    private CheckService srv;

    private List<Rule> rules;
    private List<String> data;


    @Before
    public void setup()throws IOException, ScriptException  {
        srv = new CheckService();
        rules = new ArrayList<>();
        data = new ArrayList<>();
        //header
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        //oppure
        //data = ParsingService.parse(ParsingServiceTest.class.getResource("/residenziale.csv"));
    }

    @Test
    public void testInvalidMonth(){
        rules.add(new Rule("1", "!validMonth( [[0.6]] )", "''",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|16|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("InvalidMonth function result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testCheckEmpty(){
        rules.add(new Rule("1", "checkEmpty( '[[0.6]]' )", "", false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|12344|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4||0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("NotEmpty function result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testRule10(){
        rules.add(new Rule("10", "[[0.7]] < 2010", "\"'0.7=2010'\"", false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|2016|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|2006|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Rule 10 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testRule20(){
        rules.add(new Rule("20", "[[0.7]] > new Date().getFullYear()", "\"'0.7=' + new Date().getFullYear()\"", false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|2002|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|2020|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Rule 20 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testRule30(){
        rules.add(new Rule("30", "( [[0.7]] == new Date().getFullYear() ) && ( [[0.6]] > new Date().getMonth() + 1 )", "\"'0.6=' + Number( new Date().getMonth() + 1) \"", false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|1|2017|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|16|2017|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Rule 30 result should not be emtpy", results.size() == 1 );
    }

    /*
    @Test
    public void testRule100(){
        rules.add(new Rule("100", "true", "{}", false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Rule 100 result should not be emtpy", results.size() == 1 );
    }
*/

    @Test
    public void testRule110(){
        rules.add(new Rule("110", "!validMonth( [[8.1]]) || [[8.2]] < 2010 || [[8.2]] > 2050", "\"'8.2=' + new Date().getFullYear() + ',8.1=' + Number(new Date().getMonth() + 1)\"",false));
        // correct
        data.add("1|2016|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("81|2082|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Rule 110 result should not be emtpy", results.size() == 1 );
    }

/*
    @Test
    public void testRule140(){
        rules.add(new Rule("140", "true", "{}",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Rule 140 result should not be emtpy", results.size() == 1 );
    }
*/
/*
    @Test
    public void testRule150(){
        rules.add(new Rule("150", "true", "{}",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Rule 150 result should not be emtpy", results.size() == 1 );
    }
*/
/*
    @Test
    public void testRule160(){
        rules.add(new Rule("160", "true", "{}",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Rule 160 result should not be emtpy", results.size() == 1 );
    }
*/
    @Test
    public void testRule370(){
        rules.add(new Rule("370", "checkEmpty( '[[5.1]]' ) && Number('[[0.1]]') == 3", "\"'5.1=4'\"",false));
        // correct
        data.add("8.1|8.2|3|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|3|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5||6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Rule 370 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testRule380(){
        rules.add(new Rule("380", "checkEmpty( '[[5.1]]' ) && Number('[[0.1]]') != 3", "\"'5.1=1'\"",false));
        // correct
        data.add("8.1|8.2|1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|2|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5||6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Rule 380 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testError110(){
        rules.add(new Rule("110", "checkError110( '[[2.1]]','[[2.2]]','[[2.3]]','[[2.4]]','[[2.5]]','[[2.6]]','[[2.8]]','[[2.9]]','[[2.10.1]]','[[2.10.2]]','[[2.10.3]]','[[2.10.4]]','[[2.10.5]]','[[2.11]]','[[2.7.11]]','[[2.7.64]]','[[2.12]]','[[3.1]]','[[3.2]]','[[3.3]]','[[3.4]]','[[3.5]]','[[3.6]]','[[3.7]]','[[3.8]]','[[3.9]]','[[3.10]]','[[3.11]]','[[3.12]]','[[4.1]]','[[4.2]]','[[4.3]]','[[4.4]]','[[4.5]]' )", "''",true));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|21|22|23|||||||||||||||||||||||||||||||||||||||||||||||||1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Error 110 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testError120(){
        rules.add(new Rule("120", "checkError120( '[[2.1]]','[[2.2]]','[[2.3]]','[[2.4]]','[[2.5]]','[[2.6]]','[[2.8]]','[[2.9]]','[[2.10.1]]','[[2.10.2]]','[[2.10.3]]','[[2.10.4]]','[[2.10.5]]','[[2.11]]','[[2.7.11]]','[[2.7.64]]','[[2.12]]','[[3.1]]','[[3.2]]','[[3.3]]','[[3.4]]','[[3.5]]','[[3.6]]','[[3.7]]','[[3.8]]','[[3.9]]','[[3.10]]','[[3.11]]','[[3.12]]','[[4.1]]','[[4.2]]','[[4.3]]','[[4.4]]','[[4.5]]' )", "",true));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Error 120 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testError130(){
        rules.add(new Rule("130", "checkEmpty('[[0.3]]') || checkEmpty('[[0.4]]') || checkEmpty('[[0.6]]') || checkEmpty('[[0.7]]')", "",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|3|2004|6|2007|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2||2004|6|2007|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Error 130 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testError140(){
        rules.add(new Rule("140", "[[0.7]] < 2010", "",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|3|2004|6|2007|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2||2004|6|2017|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Error 140 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testError200(){
        rules.add(new Rule("200", "Number('[[2.10.1]]') + Number('[[2.10.2]]') + Number('[[2.10.3]]') + Number('[[2.10.4]]') + Number('[[2.10.5]]') >= ( Number('[[2.8]]') + Number('[[2.9]]') + Number('[[2.10.1]]') + Number('[[2.10.2]]') + Number('[[2.10.3]]') + Number('[[2.10.4]]') + Number('[[2.10.5]]'))/2", "",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|450|450||210|103|||2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|110|||210|103|||2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Error 200 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testError210(){
        rules.add(new Rule("210", "Number('[[2.4]]') > 6*Number('[[2.1]]')", "",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|21|2.2|2.3|140|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|21|2.2|2.3|110|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<Rule>> results  = srv.performCheck(data, rules);
        assertTrue("Error 210 result should not be emtpy", results.size() == 1 );
    }
}
