package it.istat.dcit.itc.greg;

import it.istat.dcit.itc.greg.dto.RuleDTO;
import it.istat.dcit.itc.greg.model.Rule;
import it.istat.dcit.itc.greg.service.CheckService;
import it.istat.dcit.itc.greg.service.ParsingService;
import org.junit.Before;
import org.junit.Test;

import javax.script.ScriptException;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertTrue;

/**
 * Test rules
 */
public class CheckValidationTest {

    private CheckService srv;

    private List<Rule> rules;
    private List<String> data;

    private Reader validation;


    @Before
    public void setup()throws IOException, ScriptException  {
        srv = new CheckService();
        rules = new ArrayList<>();
        data = new ArrayList<>();
        validation = ParsingService.parseValidations(CheckValidationTest.class.getResource("/validation.js"));
        //header
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        //oppure
        //data = ParsingService.parse(ParsingServiceTest.class.getResource("/residenziale.csv"));
    }


    @Test
    public void testError110(){
        rules.add(new Rule("110", "checkError110( '[[2.1]]','[[2.2]]','[[2.3]]','[[2.4]]','[[2.5]]','[[2.6]]','[[2.8]]','[[2.9]]','[[2.10.1]]','[[2.10.2]]','[[2.10.3]]','[[2.10.4]]','[[2.10.5]]','[[2.11]]','[[2.7.11]]','[[2.7.64]]','[[2.12]]','[[3.1]]','[[3.2]]','[[3.3]]','[[3.4]]','[[3.5]]','[[3.6]]','[[3.7]]','[[3.8]]','[[3.9]]','[[3.10]]','[[3.11]]','[[3.12]]','[[4.1]]','[[4.2]]','[[4.3]]','[[4.4]]','[[4.5]]' )", "",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|21|22|23|||||||||||||||||||||||||||||||||||||||||||||||||1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Error 110 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testError120(){
        rules.add(new Rule("120", "checkError120( '[[2.1]]','[[2.2]]','[[2.3]]','[[2.4]]','[[2.5]]','[[2.6]]','[[2.8]]','[[2.9]]','[[2.10.1]]','[[2.10.2]]','[[2.10.3]]','[[2.10.4]]','[[2.10.5]]','[[2.11]]','[[2.7.11]]','[[2.7.64]]','[[2.12]]','[[3.1]]','[[3.2]]','[[3.3]]','[[3.4]]','[[3.5]]','[[3.6]]','[[3.7]]','[[3.8]]','[[3.9]]','[[3.10]]','[[3.11]]','[[3.12]]','[[4.1]]','[[4.2]]','[[4.3]]','[[4.4]]','[[4.5]]' )", "",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Error 120 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testError130(){
        rules.add(new Rule("130", "checkError130('[[0.3]]','[[0.4]]','[[0.6]]','[[0.7]]')", "",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|3|2004|6|2007|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2||2004|6|2007|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Error 130 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testError140(){
        rules.add(new Rule("140", "checkError140('[[0.7]]')", "",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|3|2004|6|2007|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2||2004|6|2017|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Error 140 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testError200(){
        rules.add(new Rule("200", "checkError200('[[2.10.1]]','[[2.10.2]]','[[2.10.3]]','[[2.10.4]]','[[2.10.5]]','[[2.8]]','[[2.9]]','[[2.10.1]]','[[2.10.2]]','[[2.10.3]]','[[2.10.4]]','[[2.10.5]]')", "",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|450|450||210|103|||2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|110|||210|103|||2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Error 200 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testError210(){
        rules.add(new Rule("210", "checkError210('[[2.4]]','[[2.1]]')", "",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|21|2.2|2.3|140|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|21|2.2|2.3|110|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Error 210 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testError400() {
        // TODO checkError400
        assertTrue("",true);
    }

    @Test
    public void testError410() {
        // TODO checkError410
        assertTrue("",true);
    }

    @Test
    public void testError420() {
        // TODO checkError420
        assertTrue("",true);
    }


    @Test
    public void testError430() {
        // TODO checkError430
        assertTrue("",true);
    }



    @Test
    public void testCorrection10(){
        rules.add(new Rule("10", "checkCorrection10('[[0.7]]')", "getCorrection10Action()", false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|2016|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|2006|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Rule 10 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testCorrection20(){
        rules.add(new Rule("20", "checkCorrection20('[[0.7]]')", "getCorrection20Action()", false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|2002|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|2020|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Rule 20 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testCorrection30(){
        rules.add(new Rule("30", "checkCorrection30('[[0.7]]','[[0.6]]')", "getCorrection30Action()", false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|1|2017|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|16|2017|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Rule 30 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testCorrection100(){
        rules.add(new Rule("100", "checkCorrection100('[[8.1]]','[[8.2]]')", "getCorrection100Action('[[0.6]]','[[0.7]]')", false));
        // correct
        data.add("1|2017|0.1|0.2|0.3|0.4|1|2017|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("z||0.1|0.2|0.3|0.4|1|2017|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Rule 100 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testCorrection110(){
        rules.add(new Rule("110", "checkCorrection110('[[8.1]]','[[8.2]]')", "getCorrection110Action()",false));
        // correct
        data.add("1|2016|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("81|2082|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Rule 110 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testCorrection140(){
        rules.add(new Rule("140", "checkCorrection140()", "getCorrection140Action()",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Rule 140 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testCorrection150(){
        rules.add(new Rule("150", "checkCorrection150('[[0.3]]','[[0.4]]','[[0.6]]','[[0.7]]')", "getCorrection150Action('[[0.6]]','[[0.7]]')",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Rule 150 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testCorrection160(){
        rules.add(new Rule("160", "checkCorrection160()", "getCorrection160Action()",false));
        // correct
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|0.1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|5.1|6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Rule 160 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testCorrection370(){
        rules.add(new Rule("370", "checkCorrection370('[[5.1]]','[[0.1]]')", "getCorrection370Action()",false));
        // correct
        data.add("8.1|8.2|3|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|3|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5||6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Rule 370 result should not be emtpy", results.size() == 1 );
    }

    @Test
    public void testCorrection380(){
        rules.add(new Rule("380", "checkCorrection380('[[5.1]]','[[0.1]]')", "getCorrection380Action()",false));
        // correct
        data.add("8.1|8.2|1|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5|1|6.1|6.2|7.1");
        // wrong
        data.add("8.1|8.2|2|0.2|0.3|0.4|0.6|0.7|0.5|0.8|0.9|1.1|1.2|1.3|1.4|1.8|2.1|2.2|2.3|2.4|2.5|2.6|2.7.11|2.7.21|2.7.31|2.7.41|2.7.51|2.7.61|2.7.12|2.7.22|2.7.32|2.7.42|2.7.52|2.7.62|2.7.13|2.7.23|2.7.33|2.7.43|2.7.53|2.7.63|2.7.14|2.7.24|2.7.34|2.7.44|2.7.54|2.7.64|2.12|2.8|2.9|2.10.1|2.10.2|2.10.3|2.10.4|2.10.5|2.11|3.1|3.2|3.3|3.4|3.5|3.6|3.7|3.8|3.9|3.10|3.11|3.12|4.1|4.2|4.3|4.4|4.5||6.1|6.2|7.1");
        Map<String, List<RuleDTO>> results  = srv.performCheck(data, rules, validation, null);
        assertTrue("Rule 380 result should not be emtpy", results.size() == 1 );
    }

}
